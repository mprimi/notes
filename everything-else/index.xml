<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>📓 Marco's Notes</title><link>https://notes.mpri.me/everything-else/</link><description>Recent changes in 📓 Marco's Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright><atom:link href="https://notes.mpri.me/everything-else/index.xml" rel="self" type="application/rss+xml"/><item><title>A deck to play with HackMD Markdown slides</title><link>https://notes.mpri.me/everything-else/hackmd-slides-sandbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/hackmd-slides-sandbox/</guid><description>&lt;h1 id="sandbox">Sandbox&lt;/h1>
&lt;hr>
&lt;h1 id="hackmd-reference">HackMD reference&lt;/h1>
&lt;p>&lt;a href="https://hackmd.io/features">Features overview&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://hackmd.io/s/how-to-create-slide-deck">Slides guide&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://hackmd.io/slide-example?both">Example slides&lt;/a> (&lt;a href="https://hackmd.io/p/slide-example">preview&lt;/a>)&lt;/p>
&lt;hr>
&lt;h1 id="navigation">Navigation&lt;/h1>
&lt;p>&lt;code>esc&lt;/code>: Deck overview
&lt;code>space&lt;/code>: next slide (including subsections)
&lt;code>← →&lt;/code>: previous, next section
&lt;code>↑ ↓&lt;/code>: previous. next within section&lt;/p>
&lt;hr>
&lt;h1 id="slides-and-slides-groups">Slides and slides groups&lt;/h1>
&lt;p>Separate slides with:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
&lt;/code>&lt;/pre>&lt;p>Separate slides in the same section with:&lt;/p>
&lt;pre tabindex="0">&lt;code>----
&lt;/code>&lt;/pre>&lt;hr>
&lt;h1 id="fragments">Fragments&lt;/h1>
&lt;p>Hit spacebar (gently)&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&amp;hellip; a&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->fragmented&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->slide.&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>Highlight &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->red&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->blue&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->green&lt;!-- raw HTML omitted -->&lt;/p>
&lt;hr>
&lt;h1 id="transitions">Transitions&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;p>Fade-in, fade-out; default, slow, fast.&lt;/p>
&lt;hr>
&lt;h1 id="aspect-customization">Aspect customization&lt;/h1>
&lt;ul>
&lt;li>Themes (via YAML)&lt;/li>
&lt;li>Slide background (color or image, tiled images)&lt;/li>
&lt;li>Video and GIF backgrounds&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="meta-customization">Meta customization&lt;/h1>
&lt;p>YAML header for document metadata, crawler/robots, themes, etc.&lt;/p>
&lt;hr>
&lt;h1 id="images--media">Images &amp;amp; Media&lt;/h1>
&lt;hr>
&lt;h1 id="relative-links">Relative links&lt;/h1></description></item><item><title>Choosing Cloud Storage</title><link>https://notes.mpri.me/everything-else/cloud-storage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/cloud-storage/</guid><description>&lt;p>These days there are literally hundreds of options when it comes to choosing cloud storage.&lt;/p>
&lt;p>Wether it&amp;rsquo;s for personal use, family sharing, for a small project or for a company.&lt;/p>
&lt;p>Too many times, I&amp;rsquo;ve seen people draw a short list from household names (Dropbox, Amazon, BitTorrent, &amp;hellip;) and then narrow it down, primarily based on cost.&lt;/p>
&lt;p>This list of questions is designed to make you stop and think a little more about what you are looking for. Before making a choice that you may soon regret.&lt;/p>
&lt;p>I suggest going down the list &lt;strong>twice&lt;/strong>.
The first time answer with the &lt;em>current&lt;/em> needs.
The second time answer with the needs you expect &lt;em>a year from now&lt;/em> (or your best estimate..).&lt;/p>
&lt;h2 id="data-size">Data size&lt;/h2>
&lt;p>What is the estimated average, minimum, maximum amount of data stored?&lt;/p>
&lt;p>How many artifacts will be created on an average day?&lt;/p>
&lt;p>How much new data will be created on an average day?&lt;/p>
&lt;p>How much old data and how many artifacts are deleted?&lt;/p>
&lt;h2 id="data-and-access-location">Data and access location&lt;/h2>
&lt;p>Where (geographically) is the data uploaded from?&lt;/p>
&lt;p>Where is downloaded from?&lt;/p>
&lt;h2 id="access-pattern">Access pattern&lt;/h2>
&lt;p>Are data artifacts downloaded by a single person, or a small group, or a large group of people?&lt;/p>
&lt;p>How spread over time are data artifacts spread?&lt;/p>
&lt;p>Data lifecycle and lifespan&lt;/p>
&lt;p>Are data artifacts ever modified in-place? Or are they immutable (i.e. each modification creates a new artifact)?&lt;/p>
&lt;p>How many artifacts are created/modified/deleted every day?&lt;/p>
&lt;h2 id="permissions-model">Permissions model&lt;/h2>
&lt;p>Should everyone be able to upload, delete anything?&lt;/p>
&lt;p>Or should each user only be able to touch a specific set of files?&lt;/p>
&lt;p>Or should permissions change per group of users?&lt;/p>
&lt;p>How many users?&lt;/p>
&lt;p>How many groups?&lt;/p>
&lt;p>Is administrators/workers sufficient, or do you need per-project permissions?&lt;/p>
&lt;p>Or even per-artifact permissions?&lt;/p>
&lt;h2 id="discoverability">Discoverability&lt;/h2>
&lt;p>Which users can see all artifacts? (“See” as in: know they exist)&lt;/p>
&lt;p>Which users can see all artifacts for a projects?&lt;/p>
&lt;p>Which users can see the full list of projects?&lt;/p>
&lt;h2 id="integration">Integration&lt;/h2>
&lt;p>What kind of actionable notifications?
Examples: Upload begun, upload completed, download begun download completed, deleted, moved, overwritten, …&lt;/p>
&lt;h2 id="data-classes">Data classes&lt;/h2>
&lt;p>Are all artifacts more or less the same? (i.e. intermediate production artifacts)&lt;/p>
&lt;p>Or can you group them into well defined categories?&lt;/p>
&lt;h2 id="metadata">Metadata&lt;/h2>
&lt;p>Which metadata is stored in the file itself, and which is stored in an external database?&lt;/p>
&lt;p>(e.g., author, project name, creation date, notes from author, next step in pipeline, …)&lt;/p>
&lt;h2 id="compression">Compression&lt;/h2>
&lt;p>Do artifact shrink in size if compressed?&lt;/p>
&lt;h2 id="upload--download-speed">Upload &amp;amp; download speed&lt;/h2>
&lt;p>How important are upload and download speed?&lt;/p>
&lt;p>Can files be downloaded overnight?&lt;/p>
&lt;h2 id="auditing">Auditing&lt;/h2>
&lt;p>Do you need an auditable log of all operations?&lt;/p>
&lt;p>(i.e. who uploaded/downloaded/deleted/modified what piece of data and when)&lt;/p>
&lt;h2 id="consequences">Consequences&lt;/h2>
&lt;p>What are the consequences of losing ALL the data?
(i.e. the cloud storage provider dumps you)&lt;/p>
&lt;p>What are the consequences of losing SOME data?
(i.e. human mistake)&lt;/p>
&lt;p>What are the consequences of data being leaked on the internet?&lt;/p>
&lt;h2 id="legal">Legal&lt;/h2>
&lt;p>Are there restrictions to where data can be stored?&lt;/p></description></item><item><title>Docker reference</title><link>https://notes.mpri.me/everything-else/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/docker/</guid><description>&lt;pre tabindex="0">&lt;code>attach Attach local standard input, output, and error streams to a running container
build Build an image from a Dockerfile
commit Create a new image from a container's changes
create Create a new container
cp Copy files/folders between a container and the local filesystem
diff Inspect changes to files or directories on a container's filesystem
export Export a container's filesystem as a tar archive
import Import the contents from a tarball to create a filesystem image
history Show the history of an image
save Save one or more images to a tar archive (streamed to STDOUT by default)
update Update configuration of one or more containers
tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
load Load an image from a tar archive or STDIN
images List images
rmi Remove one or more images
exec Run a command in a running container
rm Remove one or more containers
ps List containers
run Run a command in a new container
rename Rename a container
login Log in to a Docker registry
logout Log out from a Docker registry
pull Pull an image or a repository from a registry
push Push an image or a repository to a registry
search Search the Docker Hub for images
events Get real time events from the server
top Display the running processes of a container
port List port mappings or a specific mapping for the container
stats Display a live stream of container(s) resource usage statistics
logs Fetch the logs of a container
kill Kill one or more running containers
pause Pause all processes within one or more containers
restart Restart one or more containers
unpause Unpause all processes within one or more containers
wait Block until one or more containers stop, then print their exit codes
stop Stop one or more running containers
start Start one or more stopped containers
&lt;/code>&lt;/pre>&lt;h2 id="run-create-a-new-container">&lt;code>run&lt;/code>: create a new container&lt;/h2>
&lt;pre tabindex="0">&lt;code>docker run -d -p X:Y &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>-d&lt;/code> for detach&lt;/li>
&lt;li>&lt;code>-p&lt;/code> to map port X of the host to port Y of the container&lt;/li>
&lt;/ul>
&lt;h3 id="interactive-shell">Interactive shell&lt;/h3>
&lt;p>New container:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker run -it --entrypoint /bin/sh &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Existing container:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker exec &amp;lt;container&amp;gt; /bin/sh
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>-i&lt;/code> keep stdin open&lt;/li>
&lt;li>&lt;code>-t&lt;/code> allocate pseudo-terminal&lt;/li>
&lt;/ul>
&lt;h2 id="build">&lt;code>build&lt;/code>&lt;/h2>
&lt;pre tabindex="0">&lt;code>docker build -t &amp;lt;tag&amp;gt; &amp;lt;dir or url&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="listing-containers">Listing containers&lt;/h3>
&lt;p>Running: &lt;code>docker ps&lt;/code>&lt;/p>
&lt;p>All: &lt;code>docker ps -a&lt;/code>&lt;/p>
&lt;h3 id="stopped-containers">Stopped containers&lt;/h3>
&lt;p>If a container command completes, or a container is killed.
The container reaches &amp;lsquo;stopped&amp;rsquo; state.&lt;/p>
&lt;p>Stopped containers are preserved.
They can be restarted. Or the state can be committed to a new image.&lt;/p>
&lt;p>&lt;code>docker ps -a&lt;/code> shows all containers, including stopped ones&lt;/p>
&lt;h3 id="removing-containers">Removing containers&lt;/h3>
&lt;pre tabindex="0">&lt;code>docker rm &amp;lt;id or name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Remove all stopped containers&lt;/p>
&lt;pre tabindex="0">&lt;code>docker ps -aq -f status=exited | xargs docker rm
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>-a&lt;/code>: show all&lt;/li>
&lt;li>&lt;code>-q&lt;/code>: only list container id&lt;/li>
&lt;li>&lt;code>-f&lt;/code>: filter&lt;/li>
&lt;/ul>
&lt;h2 id="dockerfile">&lt;code>Dockerfile&lt;/code>&lt;/h2>
&lt;p>Example directory layout:&lt;/p>
&lt;pre tabindex="0">&lt;code>Dockerfile
.dockerignore
data/
cats.csv
dogs.csv
scripts/
install.sh
run.sh
&lt;/code>&lt;/pre>&lt;p>Example &lt;code>Dockerfile&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>FROM alpine:latest
WORKDIR /app
COPY . .
RUN chmod +x scripts/*.sh
RUN scripts/install.sh
ENTRYPOINT [&amp;quot;/bin/sh&amp;quot;, &amp;quot;scripts/run.sh&amp;quot;]
CMD [&amp;quot;default&amp;quot;]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>FROM&lt;/code> - Base image, required&lt;/li>
&lt;li>&lt;code>WORKDIR&lt;/code> - change working directory in container (creates non-existing directories)&lt;/li>
&lt;li>&lt;code>COPY&lt;/code> - from host to container&lt;/li>
&lt;li>&lt;code>RUN&lt;/code> - execute command in a new container layer and commit results&lt;/li>
&lt;li>&lt;code>ENTRYPOINT&lt;/code> - command to execute when running&lt;/li>
&lt;li>&lt;code>CMD&lt;/code> - default arguments to entrypoint&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference&lt;/a>&lt;/p>
&lt;h2 id="volumes--mounts">Volumes &amp;amp; Mounts&lt;/h2>
&lt;h3 id="named-volume">Named volume&lt;/h3>
&lt;p>Volume is a special file on the host that is mounted in containers.&lt;/p>
&lt;pre tabindex="0">&lt;code># Create
docker volume create &amp;lt;volume_name&amp;gt;
# Start with mount
docker run -v &amp;lt;volume_name&amp;gt;:&amp;lt;mount_point&amp;gt; &amp;lt;image&amp;gt;
# Show details
docker volume inspect &amp;lt;volume_name&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="bind-mount">Bind Mount&lt;/h3>
&lt;p>Mount a host directory inside the container.&lt;/p>
&lt;pre tabindex="0">&lt;code>docker run -v &amp;lt;host_dir&amp;gt;:&amp;lt;mount_point&amp;gt; &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Volume commands:&lt;/p>
&lt;pre tabindex="0">&lt;code>create Create a volume
inspect Display detailed information on one or more volumes
ls List volumes
prune Remove all unused local volumes
rm Remove one or more volumes
&lt;/code>&lt;/pre>&lt;h2 id="network">Network&lt;/h2>
&lt;p>Put containers on the same network to let them talk to each-other.&lt;/p>
&lt;pre tabindex="0">&lt;code>
# Create network
docker network create &amp;lt;network_name&amp;gt;
# Start with network and network hostname
docker run --network &amp;lt;network_name&amp;gt; --network-alias &amp;lt;container_hostname&amp;gt; &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code># Listen on host1
docker run --network testnet --network-alias host1 &amp;lt;image&amp;gt;
docker exec -it &amp;lt;host1 container name&amp;gt; nc -v -l -p 3000
# Connect from host2
docker run --network testnet --network-alias host2 &amp;lt;image&amp;gt;
docker exec -it &amp;lt;host2 container name&amp;gt; nc host1.testnet 3000
&lt;/code>&lt;/pre>&lt;h3 id="network--commands">Network Commands&lt;/h3>
&lt;pre tabindex="0">&lt;code>connect Connect a container to a network
create Create a network
disconnect Disconnect a container from a network
inspect Display detailed information on one or more networks
ls List networks
prune Remove all unused networks
rm Remove one or more networks
&lt;/code>&lt;/pre>&lt;h2 id="docker-compose">Docker compose&lt;/h2>
&lt;p>Compose containers via &lt;code>docker-compose.yml&lt;/code> specification.&lt;/p>
&lt;p>Network is automatically created.&lt;/p>
&lt;pre tabindex="0">&lt;code>version: &amp;quot;3.7&amp;quot;
services:
listener:
image: alpine:latest
command: nc -v -l -p 3000
ping:
image: alpine:latest
command: echo hello | nc listener 3000
&lt;/code>&lt;/pre>&lt;p>Commands&lt;/p>
&lt;pre tabindex="0">&lt;code>down Stop and remove containers, networks, images, and volumes
up Create and start containers
config Validate and view the Compose file
create Create services
build Build or rebuild services
events Receive real time events from containers
logs View output from containers
exec Execute a command in a running container
kill Kill containers
rm Remove stopped containers
images List images
pull Pull service images
push Push service images
ps List containers
port Print the public port for a port binding
top Display the running processes
run Run a one-off command
scale Set number of containers for a service
start Start services
stop Stop services
restart Restart services
unpause Unpause services
pause Pause services
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://docs.docker.com/compose/compose-file/">Compose file reference&lt;/a>&lt;/p>
&lt;h2 id="debug">Debug&lt;/h2>
&lt;h3 id="image-history">Image history&lt;/h3>
&lt;p>Trace the steps that built the image&lt;/p>
&lt;pre tabindex="0">&lt;code>docker image history &amp;lt;image&amp;gt;
&lt;/code>&lt;/pre></description></item><item><title>macOS startup service and daemons</title><link>https://notes.mpri.me/everything-else/macos-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/macos-startup/</guid><description>&lt;p>Reference to find and stop annoying applications and services that auto-start on login or auto-restart when killed.&lt;/p>
&lt;h2 id="launchd">&lt;code>launchd&lt;/code>&lt;/h2>
&lt;ul>
&lt;li>&lt;code>LaunchDaemon&lt;/code> items run with system privileges&lt;/li>
&lt;li>&lt;code>LaunchAgent&lt;/code> items run in user context after login&lt;/li>
&lt;/ul>
&lt;p>&lt;code>launchd&lt;/code> auto-loads from the following locations:&lt;/p>
&lt;ul>
&lt;li>&lt;code>~/Library/LaunchAgent&lt;/code>&lt;/li>
&lt;li>&lt;code>/Library/LaunchAgents&lt;/code>&lt;/li>
&lt;li>&lt;code>/Library/LaunchDaemons&lt;/code>&lt;/li>
&lt;li>&lt;code>/System/Library/LaunchAgents&lt;/code>&lt;/li>
&lt;li>&lt;code>/System/Library/LaunchDaemons&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Notice that &lt;code>/System/&lt;/code> is protected by system integrity checks, so it&amp;rsquo;s unlikely that&amp;rsquo;s where apps registers.&lt;/p>
&lt;p>List services: &lt;code>launchctl list&lt;/code>&lt;/p>
&lt;p>Dump &lt;code>launchd state&lt;/code>: &lt;code>launchctl dumpstate&lt;/code>&lt;/p>
&lt;h2 id="cron">&lt;code>cron&lt;/code>&lt;/h2>
&lt;p>List cron jobs for user: &lt;code>crontab -l&lt;/code>&lt;/p>
&lt;h2 id="helper-applications">Helper applications&lt;/h2>
&lt;p>Some applications bundle a helper application that manages to start despite not having a &lt;code>launchd&lt;/code> plist in the locations above.&lt;/p>
&lt;p>Try: &lt;code>find /Applications/ -name 'LoginItems'&lt;/code>&lt;/p></description></item><item><title>Personal document management with git</title><link>https://notes.mpri.me/everything-else/git-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/git-basics/</guid><description>&lt;p>This tutorial is for my dear friend M.
Like any person working on computers, M. struggles with keeping track of changes to files.&lt;/p>
&lt;p>This is the simplest possible tutorial that explains how to leverage &lt;code>git&lt;/code> for very simple personal projects.&lt;/p>
&lt;p>This tutorial covers:&lt;/p>
&lt;ul>
&lt;li>Versioning of a small set of files for a single person. i.e. personal notes/essay/homeworks/article, &amp;hellip;&lt;/li>
&lt;li>Inspecting and restoring of old versions&lt;/li>
&lt;li>Backups and sharing with others via cloud&lt;/li>
&lt;/ul>
&lt;p>This tutorial does NOT cover branching, stashes, resolving conflicts, merge strategies, rewriting history, pulling from remote, fixups, aliases, configuration, etc. There are millions of tutorials out there that can teach you these advanced topics.&lt;/p>
&lt;h2 id="-old-school-versioning">📜 Old school versioning&lt;/h2>
&lt;p>We&amp;rsquo;ve all done this at some point, it looks something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>letter.txt
letter-2.txt
letter-3.txt
letter-v4.txt
letter-v4-with-edits.txt
letter-v4-final.txt
letter-v4-final-with-images.txt
...
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Quiz: In this example, which file is the latest and greatest version? I don&amp;rsquo;t know, and neither do you! If you&amp;rsquo;re using old school versioning, make damn sure you give a &lt;em>unique&lt;/em> version number every time you create a new version!&lt;/p>
&lt;/blockquote>
&lt;p>This versioning strategy works ok with single-file projects.
It creates some little clutter, wastes space on disk and &lt;a href="https://physics.stackexchange.com/questions/31326/is-a-hard-drive-heavier-when-it-is-full">makes your laptop heavier to carry&lt;/a>). But that seems acceptable.&lt;/p>
&lt;p>This approach breaks down as soon as your project consists of multiple files.
One could apply the same &amp;ldquo;versioning&amp;rdquo; strategy to the entire folder.&lt;/p>
&lt;h2 id="-the-right-tool-for-the-job">🪛 The right tool for the job&lt;/h2>
&lt;p>To me, using file copies to version files is using a hammer to drive a screw.
If you need to drive a screw, use a screwdriver.
If you need to version files, use &lt;code>git&lt;/code>.&lt;/p>
&lt;h2 id="git-vs-github">&lt;code>git&lt;/code> vs. GitHub&lt;/h2>
&lt;p>&lt;code>git&lt;/code> is a tool installed on your computer. You may use it in a terminal or with a GUI.
&lt;code>git&lt;/code> transforms a folder into a little database and then uses that database to store and manage your versions.&lt;/p>
&lt;p>You can definitely use &lt;code>git&lt;/code> without GitHub.
You should probably learn to use &lt;code>git&lt;/code> before you even look at GitHub.&lt;/p>
&lt;p>GitHub is a service from Microsoft. GitLab, BitBucket, and many others offer similar services.&lt;/p>
&lt;p>What you get with GitHub:&lt;/p>
&lt;ul>
&lt;li>Backups in the cloud &amp;ndash; if you regularly synchronize your &lt;code>git&lt;/code> projects with GH, then they are safely backed up if your computer is stolen or catches on fire&lt;/li>
&lt;li>Web &amp;ndash; GH creates a website around your repository, so you can easily share a link with a friend, e.g.: &lt;a href="https://github.com/mprimi/notes/blob/main/README.md">https://github.com/mprimi/notes/blob/main/README.md&lt;/a>, rather than having to send the file via email.&lt;/li>
&lt;li>Collaboration &amp;ndash; i can clone your repository, or send you patches for bugs I spot in your code, etc. collaboration is the main reason for hosting a project on a platform like GitHub, but it&amp;rsquo;s beyond the scope of this document&lt;/li>
&lt;/ul>
&lt;h1 id="3-2-1-lets-git">3, 2, 1, let&amp;rsquo;s &lt;code>git&lt;/code>!&lt;/h1>
&lt;p>Without further ado, let&amp;rsquo;s cover the very basics of &lt;code>git&lt;/code>.&lt;/p>
&lt;h2 id="-my-recipesgit">🍳 &lt;code>my-recipes.git&lt;/code>&lt;/h2>
&lt;p>Let&amp;rsquo;s say you have a bunch of cooking recipes you&amp;rsquo;ve collected over the years. They are stored in a Word document on your laptop.&lt;/p>
&lt;pre tabindex="0">&lt;code>recipes.adoc
&lt;/code>&lt;/pre>&lt;h3 id="a-note-on-convention">A note on convention&lt;/h3>
&lt;p>If there is a &lt;code>$&lt;/code> character at the beginning of a line, it&amp;rsquo;s a prompt.
It means i issued a command. If there is no &lt;code>$&lt;/code>, then it&amp;rsquo;s the command output.
Lines begining with &lt;code>#&lt;/code> are comments
Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># This is a comment&lt;/span>
$ echo foo &amp;lt;&lt;span style="color:#f92672">=&lt;/span> This is me issuing the command
foo &amp;lt;&lt;span style="color:#f92672">=&lt;/span> This is the output of the command
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s see how to transfer and manage this knowledge-base with &lt;code>git&lt;/code>.&lt;/p>
&lt;h2 id="1-create-a-repository">1. Create a repository&lt;/h2>
&lt;p>A repository is a special folder that acts as a database.&lt;/p>
&lt;p>I like to name my repository folder &lt;code>project-name.git&lt;/code> to easily tell distinguish a regular folder from a repository folder. But this is just personal preference, you can name your repository however you want.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># Create the new empty folder&lt;/span>
$ mkdir my-recipes.git
&lt;span style="color:#75715e"># Enter the directory (the rest of commands are issued from within)&lt;/span>
&lt;span style="color:#75715e"># Turn the current folder (.) into a git repository&lt;/span>
$ git init .
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Congratulations, you just created your first repository.
This still just looks like an empty folder, but it&amp;rsquo;s not: &lt;code>git&lt;/code> initialized an database inside a hidden folder (&lt;code>my-recipes.git/.git/&lt;/code>).&lt;/p>
&lt;p>You don&amp;rsquo;t need to know what is inside this hidden folder.
You never interact with it directly.
But it&amp;rsquo;s useful to know this is where &lt;code>git&lt;/code> does its magic (stores all your versions and other metadata).&lt;/p>
&lt;h2 id="2-add-your-existing-document">2. Add your existing document&lt;/h2>
&lt;p>One way to look think of &lt;code>git&lt;/code> is:
&lt;em>&lt;strong>If you would like to go back to something at some point in the future, then commit it!&lt;/strong>&lt;/em>&lt;/p>
&lt;p>You may at some point in the future want to retrieve your original Word document, so let&amp;rsquo;s commit it!&lt;/p>
&lt;pre tabindex="0">&lt;code># Copy the original recipes into the repository folder.
$ cp ~/Documents/recipes.adoc .
&lt;/code>&lt;/pre>&lt;p>Rather than moving the original file (&lt;code>~/Documents/recipes.adoc&lt;/code>) in the repo, I made a copy. Just in case. You really don&amp;rsquo;t want to lose it while you mess up with &lt;code>git&lt;/code> for the first time. We can always delete it later.&lt;/p>
&lt;p>Let&amp;rsquo;s look at the status of your repository folder:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status
On branch master
No commits yet
Untracked files:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
recipes.adoc
nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s explain line by line:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status
&lt;/code>&lt;/pre>&lt;p>I&amp;rsquo;m invoking the &lt;code>status&lt;/code> command of &lt;code>git&lt;/code>. Which prints an overview of the status of the local repository folder (there are many more commands, ignore them for now, but if you are curious, try &lt;code>git help&lt;/code> which lists them).&lt;/p>
&lt;pre tabindex="0">&lt;code>On branch master
&lt;/code>&lt;/pre>&lt;p>Branches are an advanced topic, you don&amp;rsquo;t need to care about them for now.
However, notice your screen may actually say &lt;code>main&lt;/code> rather than &lt;code>master&lt;/code>. This is a recent change of convention, but for our purposes it&amp;rsquo;s just a name.&lt;/p>
&lt;pre tabindex="0">&lt;code>No commits yet
&lt;/code>&lt;/pre>&lt;p>You just created this repo fresh a second ago, so there&amp;rsquo;s no history at all.
If history existed, it would give you a recap of the most recent commit.&lt;/p>
&lt;pre tabindex="0">&lt;code>Untracked files:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
recipes.adoc
&lt;/code>&lt;/pre>&lt;p>Git is saying: &amp;ldquo;there is a file I haven&amp;rsquo;t seen before in this folder: &lt;code>recipes.adoc&lt;/code>&amp;rdquo;.
It also suggests &amp;ldquo;if you want to start versioning this file, use &lt;code>git add&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)
&lt;/code>&lt;/pre>&lt;p>This is telling you that you have not staged any files or changes for commit.
More on this later.&lt;/p>
&lt;p>This &lt;code>status&lt;/code> is very verbose, and contains help messages.
For the rest of this document, I&amp;rsquo;ll use the &amp;ldquo;succint&amp;rdquo; version, which gives you the same information but more compact:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status --short
?? recipes.adoc
&lt;/code>&lt;/pre>&lt;p>This says the same as before: there is a file, &lt;code>recipes.adoc&lt;/code> and I&amp;rsquo;ve never seen it before ('&lt;code>??&lt;/code>' means &amp;lsquo;untracked&amp;rsquo;).&lt;/p>
&lt;h3 id="21-first-stage-and-commit">2.1. First stage and commit&lt;/h3>
&lt;p>Creating a new version for your repository is done in 2 steps:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Stage&lt;/strong>: select the files you want to include in the next version.&lt;/li>
&lt;li>&lt;strong>Commit&lt;/strong>: create the next version of the repository, which consists of the changes/files you staged.&lt;/li>
&lt;/ol>
&lt;p>We want &lt;code>git&lt;/code> to start managing/versioning/tracking your recipes file.&lt;/p>
&lt;p>So first let&amp;rsquo;s stage the file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git add recipes.adoc
&lt;/code>&lt;/pre>&lt;p>This stages the document. Notice it does not make any change whatsoever to the file. This is true for pretty much all the comments in this document: &lt;code>git&lt;/code> does NOT modify your files. It just tracks them and makes copies in the &amp;ldquo;magic&amp;rdquo; folder.&lt;/p>
&lt;p>After adding the file to the index (another way to say staged the file, or added the file), take a look at the status:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git st --short
A recipes.adoc
&lt;/code>&lt;/pre>&lt;p>It is saying: &amp;ldquo;a file i&amp;rsquo;ve never seen before is staged&amp;rdquo; A stands for &amp;ldquo;added&amp;rdquo;.
If you ask for status in the &amp;ldquo;verbose&amp;rdquo; mode, it probably says the same with more words:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status
Changes to be committed:
(use &amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot; to unstage)
new file: recipes.adoc
&lt;/code>&lt;/pre>&lt;p>This is also telling you how to &amp;ldquo;unstage&amp;rdquo;.
Removing from the staging also does not delete or modify the file, it just means the file goes back to &amp;lsquo;untracked&amp;rsquo; status.&lt;/p>
&lt;p>Our objective for the first version is to put your file under version control.
The file is now staged, so let&amp;rsquo;s go ahead and commit:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git commit -m &amp;quot;Adding the original recipes word document&amp;quot;
[master (root-commit) cdab0fc] Adding the original recipes word document
1 file changed, 0 insertions(+), 0 deletions(-)
create mode 100644 recipes.adoc
&lt;/code>&lt;/pre>&lt;p>Commit means &amp;ldquo;create a new version of the repository with all the changes currently staged&amp;rdquo;.&lt;/p>
&lt;p>A commit requires a message: a short description of what changed in this commit.
The message itself doesn&amp;rsquo;t really matter to &lt;code>git&lt;/code>. You could say &lt;code>-m &amp;quot;cacca&amp;quot;&lt;/code> and it would be perfectly happy with it.&lt;/p>
&lt;p>Commit messages are for &lt;strong>you&lt;/strong>.
Your repository is going to quickly grow to hundreds of versions, and it&amp;rsquo;s going to be nice to scroll them and know what each commit does just by looking at the message.&lt;/p>
&lt;p>Congratulation, you just created the first version of your repository!&lt;/p>
&lt;p>Let&amp;rsquo;s look at a &lt;code>status&lt;/code> because here is when people can panic.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status
On branch master
nothing to commit, working tree clean
&lt;/code>&lt;/pre>&lt;p>I can hear you screaming: &amp;ldquo;WTF? Where did my file go???&amp;rdquo;&lt;/p>
&lt;p>As I said before staging and committing &lt;strong>do not touch the files&lt;/strong> they just create metadata.
Your file is still there. Go ahead and check.&lt;/p>
&lt;p>It is not showing up in &lt;code>status&lt;/code> because the file has no changes. The file you have is identical to the file &lt;code>git&lt;/code> knows to be the latest committed version.
So &lt;code>git&lt;/code> doesn&amp;rsquo;t even bother showing it to you, &lt;code>git&lt;/code> cares more about &lt;em>changes&lt;/em> to your directory!&lt;/p>
&lt;h2 id="3-multiple-files">3. Multiple files&lt;/h2>
&lt;p>At this point, you could be happy with what you have: a repository consisting of a single file.
Every time you modify the file, you could stage and commit, and over time you would have a versioned file, allowing you to go back to revisit previous versions if you made a mistake.&lt;/p>
&lt;p>This is good, but let&amp;rsquo;s make it better: split recipes into individual files.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ touch tiramisu.txt cappone.txt carbonara.txt
&lt;/code>&lt;/pre>&lt;p>This just creates 3 empty files.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git st --short
?? cappone.txt
?? carbonara.txt
&lt;/code>&lt;/pre>&lt;p>As expected, &lt;code>git&lt;/code> is saying: there are 3 files I&amp;rsquo;ve never seen before.&lt;/p>
&lt;p>Let&amp;rsquo;s add a first version of the recipe. For the sake of this example, I&amp;rsquo;m starting with a very shitty version of the recipes.&lt;/p>
&lt;p>Edit the files to add this content:&lt;/p>
&lt;pre tabindex="0">&lt;code>Pasta alla Carbonara
1. Cuoci la pasta
2. Aggiungi il sugo
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>Cappone della Nonna
1. Spenna il cappone
2. Cuocilo in forno
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s check status after adding the recipes:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git st --short
?? cappone.txt
?? carbonara.txt
&lt;/code>&lt;/pre>&lt;p>Same as before: 2 files never seen before.&lt;/p>
&lt;p>Let&amp;rsquo;s create a new version of the repository by adding these new files (with the current content) and creating a new commit.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git add cappone.txt carbonara.txt
$ git commit -m &amp;quot;Importing carbonara and cappone recipes&amp;quot;
&lt;/code>&lt;/pre>&lt;p>So far so good. Now that you have some history (2 commits) we can look back at it.&lt;/p>
&lt;p>The &lt;code>log&lt;/code> command is the goto for looking at repository history (altough GUIs are usually even easier).
The &lt;code>log&lt;/code> command has a thousand options, let&amp;rsquo;s stick to the simplest:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git log --oneline
41330d2 (HEAD -&amp;gt; master) Importing carbonara and cappone recipes
cdab0fc Adding the original recipes word document
&lt;/code>&lt;/pre>&lt;p>This list the full history of your repository, most recent on top.&lt;/p>
&lt;p>The first code (e.g, &lt;code>41330d2&lt;/code>) it&amp;rsquo;s just a unique identifier for each commit. Yours will be different than mine even if the files are identical, because the commit author and date will be different for your commits.&lt;/p>
&lt;p>Try this alternative view of history, which includes the files changed summary:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git log --stat
&lt;/code>&lt;/pre>&lt;p>And feel free to explore more &lt;code>log&lt;/code> options described in the manual (hit &lt;code>q&lt;/code> to exit):&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git help log
&lt;/code>&lt;/pre>&lt;h2 id="4-make-history">4. Make history&lt;/h2>
&lt;p>A &lt;code>git&lt;/code> repository records a set of mutation in a specific order.&lt;/p>
&lt;p>Let&amp;rsquo;s make history by changing a file.&lt;/p>
&lt;p>Add a step number 3 to the &lt;code>cappone.txt&lt;/code> recipe. Edit the file and save.&lt;/p>
&lt;p>Status should tell you that the file is different than the last version &lt;code>git&lt;/code> is aware of:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git status --short
M cappone.txt
&lt;/code>&lt;/pre>&lt;p>And the &lt;code>diff&lt;/code> command can tell you exactly what changed:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git diff
diff --git a/cappone.txt b/cappone.txt
index 825997d..660f0eb 100644
--- a/cappone.txt
+++ b/cappone.txt
@@ -2,3 +2,4 @@ Cappone della Nonna
1. Spenna il cappone
2. Cuocilo in forno
+3. Riposa 10 minuti
&lt;/code>&lt;/pre>&lt;p>Notice the &lt;code>+&lt;/code> in front of the last line. It&amp;rsquo;s telling you that you added this line, while the rest of the file is unchanged.&lt;/p>
&lt;p>This new version is good, so let&amp;rsquo;s commit it!&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git add cappone.txt
$ git commit -m &amp;quot;Improved cappone recipe&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s do a different change now, one that touches multiple lines.
Add a new step 1 to the carbonara recipe.&lt;/p>
&lt;p>After editing, it should look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git diff
diff --git a/carbonara.txt b/carbonara.txt
index 78852c9..700ee0a 100644
--- a/carbonara.txt
+++ b/carbonara.txt
@@ -1,4 +1,5 @@
Pasta alla Carbonara
-1. Cuoci la pasta
-2. Aggiungi il sugo
+1. Bolli l'aqua
+2. Cuoci la pasta
+3. Aggiungi il sugo
&lt;/code>&lt;/pre>&lt;p>Notice how &lt;code>git&lt;/code> is not showing this as simply adding a line at the top.
It&amp;rsquo;s telling you the two original lines are gone, and 3 new lines were added.&lt;/p>
&lt;p>This time, try to stage your changes using &amp;ldquo;interactive&amp;rdquo; add:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git add -p
diff --git a/carbonara.txt b/carbonara.txt
index 78852c9..700ee0a 100644
--- a/carbonara.txt
+++ b/carbonara.txt
@@ -1,4 +1,5 @@
Pasta alla Carbonara
-1. Cuoci la pasta
-2. Aggiungi il sugo
+1. Bolli l'aqua
+2. Cuoci la pasta
+3. Aggiungi il sugo
(1/1) Stage this hunk [y,n,q,a,d,e,?]? y
$ git commit -m &amp;quot;Improved carbonara recipe&amp;quot;
&lt;/code>&lt;/pre>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Salad Like a Pro</title><link>https://notes.mpri.me/everything-else/prosalad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/prosalad/</guid><description>&lt;h1 id="salad-like-a-pro">Salad Like a Pro&lt;/h1>
&lt;ul>
&lt;li>Keeps me full 5+ hours&lt;/li>
&lt;li>Costs less than $3&lt;/li>
&lt;li>Healthy AF&lt;/li>
&lt;li>Tasty AF, easy to vary&lt;/li>
&lt;li>5 minutes prep time (mostly knife-work)&lt;/li>
&lt;li>Minimum amount of cleanup&lt;/li>
&lt;/ul>
&lt;p>I eat a salad every.single.day for lunch. And I enjoy it every single time.
Try my way. Find your way, you will enjoy it too.&lt;/p>
&lt;h2 id="salad-time">Salad time&lt;/h2>
&lt;p>Dirties: 1 bowl, 1 fork. The cutting board and knife just need a quick rinse.&lt;/p>
&lt;p>Get the bowl, the knife, and the cutting board.
Take a few pre-prepped containers&lt;/p>
&lt;p>Start with &lt;strong>leafy greens&lt;/strong>. Not too many, the amount should be cute, not daunting.&lt;/p>
&lt;p>There are many different leafy greens.
They have different textures and flavors.
Try a few, figure out which ones you like.&lt;/p>
&lt;p>If after the salad you&amp;rsquo;re still feeling hungry, add more leafy greens next time.
This is a hack, more chewing will trick your brain into reaching a satiety feeling without actually adding any calories.&lt;/p>
&lt;p>Now chop some &lt;strong>crunchy stuff&lt;/strong>.
I like raw zucchini and peppers.&lt;/p>
&lt;p>Crunchy stuff is all raw vegetables. Carrots, broccoli, etc.
Find something you like to crunch on.
Keep the crunchy stuff in a sealed container in the fridge. It&amp;rsquo;ll last for days as you work through it.&lt;/p>
&lt;p>Add some &lt;strong>chewy stuff&lt;/strong>.
Examples: raw mushroom, boiled broccoli, boiled carrots, potatoes, beans (discussed separately later).
Chewy stuff generally spoils faster. Sniff it before you throw it in the bowl.&lt;/p>
&lt;p>The real star of the salad: &lt;strong>protein&lt;/strong>.&lt;/p>
&lt;p>Convenient options: ham (diced/sliced), fish can (tuna, mackerel, sardines, &amp;hellip;), pre-sliced cold cuts.
Tasty options: pre-prepped pulled pork or pulled chicken, or carnitas.
Made to order options: hamburger, baked salmon, scrambled eggs.&lt;/p>
&lt;p>Finally, the secret ingredient: &lt;strong>slow carbs&lt;/strong> (beans).&lt;/p>
&lt;p>A couple of spoonfuls of black beans are going to keep you full for hours.
They are slow-burning fuel.&lt;/p>
&lt;h3 id="thou-shall-not">Thou shall not&amp;hellip;&lt;/h3>
&lt;p>&amp;hellip; add bread. Or any other processed carbohydrate.
Also no other sources of sugar (for example, salad dressing).&lt;/p>
&lt;p>Carbs and sugar are going to make you hungry 1 hour after the meal.
Keep away.&lt;/p>
&lt;p>Nuts and seeds are not as bad as bread, but avoid if you can.
Same for potatoes.&lt;/p>
&lt;p>Fruit is high in sugar, avoid.&lt;/p>
&lt;h3 id="dressing">Dressing&lt;/h3>
&lt;p>Olive oil and a little salt are all you need if the vegetables and/or the protein are good.&lt;/p>
&lt;p>For variety, you can try soy sauce, goat cheese, vinegar, sauerkraut, guacamole, &amp;hellip;&lt;/p>
&lt;p>Fat is not making you fat unless you pair it with sugars.
Fatty dressings are great.&lt;/p>
&lt;h2 id="shopping">Shopping&lt;/h2>
&lt;p>The following produces 7-10 lunches for about $30:&lt;/p>
&lt;ul>
&lt;li>1 small bag of spinach&lt;/li>
&lt;li>2 cans of beans&lt;/li>
&lt;li>2 cans of tuna&lt;/li>
&lt;li>2 cans of mixed veggies&lt;/li>
&lt;li>1 cold cut pack&lt;/li>
&lt;li>1 broccoli head&lt;/li>
&lt;li>2 avocado&lt;/li>
&lt;li>2 tomato&lt;/li>
&lt;li>1 zucchini squash&lt;/li>
&lt;li>1 bell pepper&lt;/li>
&lt;/ul>
&lt;h3 id="ingredients">Ingredients&lt;/h3>
&lt;p>Leafy greens:&lt;/p>
&lt;ul>
&lt;li>Various lettuce mixes&lt;/li>
&lt;li>Kale&lt;/li>
&lt;li>Spinach&lt;/li>
&lt;/ul>
&lt;p>Crunchy things:&lt;/p>
&lt;ul>
&lt;li>Zucchini (neutral)&lt;/li>
&lt;li>Peppers (sweet)&lt;/li>
&lt;li>Carrots (sweet)&lt;/li>
&lt;li>Broccoli (neutral/bitter)&lt;/li>
&lt;li>Celery (neutral)&lt;/li>
&lt;li>Fennel (unique)&lt;/li>
&lt;li>Cucumber (neutral)&lt;/li>
&lt;li>Red onion (tingy)&lt;/li>
&lt;/ul>
&lt;p>Chewy things:&lt;/p>
&lt;ul>
&lt;li>Mushroom (raw or canned)&lt;/li>
&lt;li>Tomato&lt;/li>
&lt;li>Steamed carrots (canned or frozen)&lt;/li>
&lt;li>Steamed peas (canned or frozen)&lt;/li>
&lt;li>Steamed beets (canned)&lt;/li>
&lt;li>Steamed broccoli (prep-ahead)&lt;/li>
&lt;li>Baked eggplant (prep-ahead)&lt;/li>
&lt;/ul>
&lt;p>Beans (canned):&lt;/p>
&lt;ul>
&lt;li>Black beans&lt;/li>
&lt;li>Red kidney beans&lt;/li>
&lt;li>Garbanzo beans (denser, need less)&lt;/li>
&lt;/ul>
&lt;p>Condiments:&lt;/p>
&lt;ul>
&lt;li>Extra virgin olive oil&lt;/li>
&lt;li>Goat cheese&lt;/li>
&lt;li>Ricotta&lt;/li>
&lt;li>Soy sauce&lt;/li>
&lt;li>Sesame or sunflower seeds&lt;/li>
&lt;li>Avocado&lt;/li>
&lt;/ul>
&lt;p>Convenient protein:&lt;/p>
&lt;ul>
&lt;li>Cold cut chicken/turkey/ham&lt;/li>
&lt;li>Tuna/sardines/mackerel/salmon (canned)&lt;/li>
&lt;li>Frozen fish filets or prawns&lt;/li>
&lt;/ul>
&lt;p>Warm meal proteins (quick and easy prep):&lt;/p>
&lt;ul>
&lt;li>Chicken breasts or tights&lt;/li>
&lt;li>Pork chops&lt;/li>
&lt;/ul>
&lt;p>Big batch, microwave warmup proteins:&lt;/p>
&lt;ul>
&lt;li>Pork shoulder or ribs&lt;/li>
&lt;li>Ground pork/lamb/beef&lt;/li>
&lt;/ul>
&lt;h2 id="weekly-prep">Weekly prep&lt;/h2>
&lt;p>About once a week, I do the following prep:&lt;/p>
&lt;ul>
&lt;li>Open 2 cans of beans and 2 cans of vegetables. Rinse, drain. Store in one container.&lt;/li>
&lt;li>Wash, clean (not cut), pepper, and other crunchy things. Store in a different container.&lt;/li>
&lt;li>Steam broccoli and/or carrots. Store in a different container.&lt;/li>
&lt;li>Bake eggplant or broccoli.&lt;/li>
&lt;li>Wash the salad if needed.&lt;/li>
&lt;/ul>
&lt;h2 id="monthly-prep">Monthly prep&lt;/h2>
&lt;p>About once a month I prepare a big batch of slow-cooked meat.
I freeze it and eat it over time.
Happy to share recipes separately.&lt;/p></description></item><item><title>Smoking</title><link>https://notes.mpri.me/everything-else/smoking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/smoking/</guid><description>&lt;p>Some experiences and learning while trying to kick the habit.&lt;/p>
&lt;p>Context: I&amp;rsquo;ve smoked since i was 16 or so.
Successfully quit once, cold turkey, for about 4 years.
Then picked it back up and have been smoking since, but also trying to stop since.&lt;/p>
&lt;h2 id="cold-turkey">Cold Turkey&lt;/h2>
&lt;p>My friend&amp;rsquo;s J&amp;rsquo;s father smoked 2 packs a day for as long as I&amp;rsquo;ve known him.
One night he saw me smoking, pulled me aside, and told me he had quit.
I could quit too. Easy. I just had to read a book.&lt;/p>
&lt;p>I read the book, &lt;a href="https://duckduckgo.com/?q=Allen+Carr%27s+Easy+Way+To+Stop+Smoking">Allen Carr&amp;rsquo;s Easy Way To Stop Smoking&lt;/a>.
I did quit smoking. I did it alone, and it was indeed easy.&lt;/p>
&lt;p>I highly recommend the book, of course.
From it, i learned a great deal about how nicotine affects the body and the mind.&lt;/p>
&lt;p>One realization that changes the game is: Smoking is not a pleasure.
The pleasure comes from the temporary relief from withdrawal symptoms of nicotine.&lt;/p>
&lt;p>The feeling is fleeing.
Sometimes I don&amp;rsquo;t even enjoy the cigarette I&amp;rsquo;m currently smoking, but I&amp;rsquo;m already thinking about the next one.&lt;/p>
&lt;p>It&amp;rsquo;s mentally exhausting to be constantly thinking of when and where the next smoke is going to be.
And releasing that tension, when I get to light up, is another pleasing and addictive sensation.
Like taking off shoes after a day of work.&lt;/p>
&lt;p>The book made me think of Nicotine as a little monster that took residence in my mind.
It controls me, and makes me do bad and irrational decisions.
It makes me go outside in the rain, it makes me feel shamed to smell like smoke, it takes money from my wallet.&lt;/p>
&lt;p>The stronger I am defending from the monster&amp;rsquo;s attacks, the stronger the attacks become.
And sooner or later it always wins.&lt;/p>
&lt;p>Thinking of nicotine as an evil puppet master really helped.
Being angry at it was key to success in my first and only cold turkey stop.&lt;/p>
&lt;p>Another important learning from the book was the realization that a lot of the common knowledge about quitting was in fact total bullshit.
Things like:&lt;/p>
&lt;ul>
&lt;li>Nicotine is physically very addictive and I need help to quit (e.g., nicotine patches, hypnosis, &amp;hellip; )&lt;/li>
&lt;li>I&amp;rsquo;m going to be angry and grumpy while I quit&lt;/li>
&lt;li>I&amp;rsquo;m going to gain weight while I quit&lt;/li>
&lt;li>I enjoy smoking and I&amp;rsquo;m going to miss it&lt;/li>
&lt;li>Smoking is a great social lubricant and a good way to make new friends&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>It was particularly entertaining to see the nicotine monster panic in the first 48 hours of my cold-turkey stop.&lt;/p>
&lt;p>It got desperate real quick and started throwing the most absurd thoughts at me. Both during awake hours and in my sleep.&lt;/p>
&lt;h2 id="off-the-wagon">Off the wagon&lt;/h2>
&lt;p>3 years not smoking were easy. I didn&amp;rsquo;t have many smokers around me and so I kinda forgot about it.&lt;/p>
&lt;p>But I was naive to think i had killed the monster.&lt;/p>
&lt;p>One night I had a couple of drinks, saw someone smoking and thought: &amp;ldquo;Just one. Not gonna fall for that crap again!&amp;rdquo;.&lt;/p>
&lt;p>That one cigarette just opened the door for the monster to come back alive.
It started to give me thoughts such as: &amp;ldquo;See? You did have just one that night, you&amp;rsquo;re in control. We can have a smoke every once in a while.&amp;rdquo;&lt;/p>
&lt;p>I kept it at bay for a while, but the desire to smoke was back.&lt;/p>
&lt;p>Finally one evening I was drunk and sad. And the monster pounced back and got me stronger than even before.&lt;/p>
&lt;p>Initially I tried to resist.
Limiting smoking to weekends, or special occasions.
But, like before, the monster would always prevail.&lt;/p>
&lt;p>Re-reading the book a second time didn&amp;rsquo;t work.&lt;/p>
&lt;h2 id="building-muscle">Building muscle&lt;/h2>
&lt;p>I&amp;rsquo;ve tried all sorts of things to quit in the last 4 or so year since resuming to smoke.&lt;/p>
&lt;p>From accountabilibuddies to publicly announcing my intentions (I hate to break promises to others so I thought these could work).
Nothing really worked.&lt;/p>
&lt;p>And enjoy smoking even less than I did before because I&amp;rsquo;m more aware of the nicotine monster.
And feel more shame for not being able to kill it off, despite knowing I did it once.&lt;/p>
&lt;p>There is however one other book that made a big difference in my relationship with smoking in recent years: &lt;a href="https://duckduckgo.com/?q=the+4+hour+body+by+timothy+ferriss&amp;amp;t=brave&amp;amp;ia=web">The 4 Hour Body by Timothy Ferris&lt;/a>.&lt;/p>
&lt;p>This book does not have a chapter on smoking. Tim probably never smoked a cigarette in his life.&lt;/p>
&lt;p>However the book gave me a lot of insight and wisdom on (among other things) how to build muscle.&lt;/p>
&lt;p>I took inspiration from the careful planning that weightlifters do to hit a certain strength goal, and applied the same principle to train my &amp;ldquo;nicotine resistance&amp;rdquo; muscle.&lt;/p>
&lt;p>My &amp;ldquo;exercise plan&amp;rdquo; started very slow (10 cigarettes a day).
Then, over the course of weeks, I was &amp;ldquo;adding weight&amp;rdquo; by removing cigarettes.&lt;/p>
&lt;p>Going down to 9 per day a couple of weeks later, was easy!
And then, as soon as 9 was normal and easy. Lower to 8.
Then 7, 6, 5, 4 per day (except for cheat day once a week), over the course of about 6 months.&lt;/p>
&lt;p>I hit a wall at 4. I never really managed to go to 3.&lt;/p>
&lt;p>But this was still extremely useful. I did still develop some &amp;ldquo;muscle&amp;rdquo;: I can now go for hours without thinking of a cigarette, even if I have them in the house.
I can go for dinner or to see my friends, and leave them home.&lt;/p>
&lt;p>For me, this is something to celebrate.&lt;/p>
&lt;p>The downside of this more &amp;ldquo;healthy&amp;rdquo; relationship with smoking is however that the nicotine monster can now use this against me.
&amp;ldquo;See? You&amp;rsquo;re being so good. There&amp;rsquo;s no need to quit. 3 a day is pretty healthy and cheap!&amp;rdquo;&lt;/p>
&lt;p>But of course, giving back in in full force is just around the corner.
One day I&amp;rsquo;m particularly stressed or something bad happens, and I&amp;rsquo;ll give myself an excuse to just smoke a pack.
And the day after I&amp;rsquo;m gonna keep smoking.
And all the progress made so far is wiped out.&lt;/p>
&lt;h2 id="the-mindful-approach">The mindful approach&lt;/h2>
&lt;p>Armed with everything I&amp;rsquo;ve learned in the last 20 years, I&amp;rsquo;m doing one more attempt.&lt;/p>
&lt;p>The things I&amp;rsquo;ve learned about the monster, plus the muscle I&amp;rsquo;ve built will be useful.&lt;/p>
&lt;p>This attempt is pretty simple and should be familiar to whoever practices mindful meditation: &amp;ldquo;just let it go&amp;rdquo;.&lt;/p>
&lt;p>The desire to smoke will keep coming. Instead of dwelling on it, I just need to get back to whatever I was doing and let it pass.&lt;/p>
&lt;p>For days when the monster&amp;rsquo;s assaults will be fiercer (e.g., after a couple of drinks), I wrote down a few motes for myself:&lt;/p>
&lt;blockquote>
&lt;p>You don’t want to smoke. You want the pleasure of the release.
The moment you light up, the pleasure is it’s gone. It was an illusion.
You’re not going to enjoy smoking 1 second into it.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You cannot smoke just one.
You’ll buy a pack and smoke it, then buy another pack.
You tried everything.
You know it’s going to creep back in.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>It’s going to cost you thousands of dollars.
And possibly your life.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Like clouds on a mountaintop, let it pass.
Be the fucking mountain.&lt;/p>
&lt;/blockquote>
&lt;h2 id="internal-dialogues">Internal Dialogues&lt;/h2>
&lt;p>Once I&amp;rsquo;ve made the decision to quit, the monster starts its campaign to get me back to smoking.&lt;/p>
&lt;p>Some of the recurring attacks include:&lt;/p>
&lt;blockquote>
&lt;p>You&amp;rsquo;ve been so good! Already 3 days without smoking!
You should celebrate, reward yourself with a cigarette!&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You clearly demonstrated you can quit.
Go buy a pack to keep in the house just for special occasions.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>How about cheat day this weekend?
Just one day a week, smoke as much as you want.
Then back to no smoking for the rest of the week.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You should invite &lt;em>&lt;em>smoker_friend&lt;/em>&lt;/em> over for drinks!
That way, you can have a couple of smokes without buying a pack!&lt;/p>
&lt;/blockquote>
&lt;p>All of these sound reasonably convincing to me (no surprise.. these are the arguments I&amp;rsquo;m coming up with to convince myself to go back to smoking).&lt;/p>
&lt;p>They are all traps.&lt;/p>
&lt;p>All of them, even the most innocent, will inevitably end up with:&lt;/p>
&lt;ul>
&lt;li>Feeding the monster, rather than starving it, which is going to reinforce it&lt;/li>
&lt;li>Breaking the seal, making it easier to break it again and again in the future, until I give up again and resume smoking full-time&lt;/li>
&lt;/ul>
&lt;p>Starving the monster will take time.
Eventually it will stop bothering me daily.&lt;/p>
&lt;p>But I should not let the guard down.&lt;/p>
&lt;p>When I think I have defeated it (say, in 3 months or in 3 years), it&amp;rsquo;s when I&amp;rsquo;ll also be the most vulnerable to one of these negotiations working on me, and dragging me back into the hole.&lt;/p></description></item><item><title>Tech Jobs</title><link>https://notes.mpri.me/everything-else/tech-jobs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/tech-jobs/</guid><description>&lt;h2 id="aggregators">Aggregators&lt;/h2>
&lt;p>&lt;a href="https://www.google.com/search?q=site%3Ahttps%3A%2F%2Fnews.ycombinator.com%2F+%22Ask+HN%3A+Who+is+hiring%3F%22">Ask HN: Who is hiring?&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://japan-dev.com/">https://japan-dev.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sidequestjobs.com/">https://sidequestjobs.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.workatastartup.com/">https://www.workatastartup.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.indexventures.com/startup-jobs">https://www.indexventures.com/startup-jobs&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://4dayweek.io/">https://4dayweek.io/&lt;/a>&lt;/p>
&lt;h2 id="non-profit">Non-Profit&lt;/h2>
&lt;p>&lt;a href="https://www.ffwd.org/">Fast Forward - nonprofit accelerator&lt;/a>&lt;/p>
&lt;h1 id="grants-and-funds">Grants and Funds&lt;/h1>
&lt;p>&lt;a href="https://ethereum.foundation">https://ethereum.foundation&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://web3.foundation/grants/">https://web3.foundation/grants/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://interchain.io/funding/">https://interchain.io/funding/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://nlnet.nl/">https://nlnet.nl/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://funds.effectivealtruism.org/funds/">https://funds.effectivealtruism.org/funds/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.ngi.eu/opencalls/">https://www.ngi.eu/opencalls/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://fundoss.org/">https://fundoss.org/&lt;/a>&lt;/p>
&lt;h2 id="miscellaneous-companies-foundations--organizations">Miscellaneous companies, foundations &amp;amp; organizations&lt;/h2>
&lt;p>&lt;a href="https://www.algolia.com/careers/">https://www.algolia.com/careers/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.matrix.org/">https://www.matrix.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sovrin.org/">https://sovrin.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://metame.com/">https://metame.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://eos.io/">https://eos.io/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://livepeer.org">https://livepeer.org&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://bisontrails.co/">https://bisontrails.co/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.iqlusion.io/">https://www.iqlusion.io/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://althea.net/">https://althea.net/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://chainsafe.io/">https://chainsafe.io/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ethglobal.co/">https://ethglobal.co/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tendermint.com/">https://tendermint.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://interchain.io">https://interchain.io&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.trailofbits.com/">https://www.trailofbits.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://status.im/">https://status.im/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://polkadot.network/">https://polkadot.network/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.argent.xyz/">https://www.argent.xyz/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.ecosia.org/">https://www.ecosia.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://protocol.ai/">https://protocol.ai/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://vc.eos.io/portfolio/">https://vc.eos.io/portfolio/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://block.one/careers/">https://block.one/careers/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://interchain.berlin/">https://interchain.berlin/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://digitalmycelium.com/">https://digitalmycelium.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://element.io/careers">https://element.io/careers&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.datakind.org/">https://www.datakind.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://ripjar.com/">https://ripjar.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.efforce.io/">https://www.efforce.io/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://maidsafe.net/careers">https://maidsafe.net/careers&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://pyrofex.io/careers/">https://pyrofex.io/careers/&lt;/a>&lt;/p>
&lt;h2 id="daos">DAOs&lt;/h2>
&lt;p>&lt;a href="https://www.metacartel.org/">https://www.metacartel.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://raidguild.org/">https://raidguild.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://spacemesh.io/">https://spacemesh.io/&lt;/a>&lt;/p>
&lt;h2 id="side-quests">Side-quests&lt;/h2>
&lt;p>&lt;a href="https://gitcoin.co/">https://gitcoin.co/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://cryptocurrencyjobs.co/">https://cryptocurrencyjobs.co/&lt;/a>&lt;/p></description></item><item><title>tmux Reference</title><link>https://notes.mpri.me/everything-else/tmux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.mpri.me/everything-else/tmux/</guid><description>&lt;h2 id="cli">CLI&lt;/h2>
&lt;p>&lt;code>tmux ls&lt;/code>: List sessions&lt;/p>
&lt;p>&lt;code>tmux a&lt;/code>: Reattach last used&lt;/p>
&lt;p>&lt;code>tmux a -t &amp;lt;session-name&amp;gt;&lt;/code>: Reattach&lt;/p>
&lt;p>&lt;code>tmux source-file ~/.tmux.conf&lt;/code>: Reload&lt;/p>
&lt;h2 id="commands">Commands&lt;/h2>
&lt;p>Default prefix: &lt;code>Ctrl-b&lt;/code>&lt;/p>
&lt;pre tabindex="0">&lt;code>?: List commands
d: Detatch
:list-keys
:refresh-client
:source-file ~/.tmux.conf
&lt;/code>&lt;/pre>&lt;h3 id="windows">Windows&lt;/h3>
&lt;pre tabindex="0">&lt;code>c: New window
:new-window -n &amp;lt;name&amp;gt;
&amp;lt;N&amp;gt;: Switch to window N
w: Select
p: Previous
n: Next
x: Kill
,: Rename
&lt;/code>&lt;/pre>&lt;h3 id="panes">Panes&lt;/h3>
&lt;pre tabindex="0">&lt;code>&amp;quot;: horizontal split
%: vertical split
&amp;lt;space&amp;gt;: rearrange
o: focus next
&amp;lt;arrow&amp;gt;: move focus
ctrl-&amp;lt;arrow&amp;gt;: resize
}: swap
!: move to new window
z: zoom
&lt;/code>&lt;/pre>&lt;h3 id="sessions">Sessions&lt;/h3>
&lt;pre tabindex="0">&lt;code>): Next
(: Previous
s: Select
$: rename
&lt;/code>&lt;/pre>&lt;h2 id="intro--reference">Intro &amp;amp; Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://peterxjang.com/blog/a-minimalist-guide-to-tmux.html">https://peterxjang.com/blog/a-minimalist-guide-to-tmux.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tony/tmux-config">https://github.com/tony/tmux-config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.barbarianmeetscoding.com/blog/2019/12/25/jaimes-guide-to-tmux-the-most-awesome-tool-you-didnt-know-you-needed">https://www.barbarianmeetscoding.com/blog/2019/12/25/jaimes-guide-to-tmux-the-most-awesome-tool-you-didnt-know-you-needed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.golinuxcloud.com/tmux-cheatsheet/">https://www.golinuxcloud.com/tmux-cheatsheet/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://danielmiessler.com/study/tmux/">https://danielmiessler.com/study/tmux/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="configuration--customization">Configuration &amp;amp; Customization&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/samoshkin/tmux-config">https://github.com/samoshkin/tmux-config&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://peterforgacs.github.io/2017/04/25/Tmux/">https://peterforgacs.github.io/2017/04/25/Tmux/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="utilities--extensions">Utilities &amp;amp; Extensions&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/tmux-python/tmuxp">https://github.com/tmux-python/tmuxp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tmux-plugins/tmux-resurrect">https://github.com/tmux-plugins/tmux-resurrect&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tmux-plugins/tmux-continuum">https://github.com/tmux-plugins/tmux-continuum&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>